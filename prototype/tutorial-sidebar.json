{
  "einleitung": {
    "icon": "üí≠",
    "title": "Gedanken zur Entstehung",
    "content": "Diese Methode entstand nicht am Schreibtisch, sondern aus der Not heraus. Nach dem dritten Projekt, bei dem ich meinen eigenen Code nach zwei Wochen nicht mehr verstand, wurde mir klar: **Wir brauchen Struktur**.\n\nMein wichtigster Tipp: Starte *immer* mit einem JOURNAL.md. Dokumentiere jeden Prompt, jeden Fehler, jede Iteration. Das f√ºhlt sich anfangs √ºbertrieben an, spart aber sp√§ter Stunden."
  },
  "entwicklung": {
    "icon": "üî¨",
    "title": "Aus der Projektpraxis",
    "content": "Das Stefan-Zweig-Projekt war der Wendepunkt. Ein Timeline-Tool in 2 Stunden gebaut ‚Äì und nach 14 Tagen v√∂llig unverst√§ndlich.\n\nDie REALonline-Arbeit zeigte dann: **Expertenvalidierung ist alles**. Der Historiker korrigierte unsere Annahmen komplett. H√§tten wir ohne Dokumentation neu anfangen m√ºssen.\n\n**Lesson learned**: 5-7 Dokumente sind der Sweet Spot. Weniger = Chaos. Mehr = Overhead."
  },
  "methodik": {
    "icon": "‚öôÔ∏è",
    "title": "Wie ich wirklich arbeite",
    "content": "Die 6 Phasen klingen theoretisch, aber in der Praxis:\n\n**CONTEXT**: 15-30 Min. Braindump. Wirklich *alles* aufschreiben.\n\n**DATA**: Hier scheitern 80% der Projekte. Schlechte Daten = schlechtes Ergebnis.\n\n**IMPLEMENTATION**: Mein Geheimnis ‚Äì ich dokumentiere *w√§hrend* ich prompte, nicht danach.\n\n**Tipp**: Claude Sonnet f√ºr Architektur, GPT-4 f√ºr Code-Details. Jedes LLM hat St√§rken."
  },
  "fallstudien": {
    "icon": "üìä",
    "title": "H√§ufigste Fehler",
    "content": "Was ich in Workshops immer wieder sehe:\n\n1. **Zu fr√ºh coden** ‚Äì Die DATA-Phase wird √ºbersprungen\n2. **Keine Validierung** ‚Äì Code l√§uft, aber l√∂st das falsche Problem\n3. **Versionskontrolle vergessen** ‚Äì \"Wie war das nochmal in Version 3?\"\n\n**Pro-Tipp**: Nutze die Use-Case-Placeholders! Sie zwingen dich, √ºber Integration nachzudenken, *bevor* du Stunden investierst."
  },
  "workshop": {
    "icon": "üéì",
    "title": "Workshop-Erfahrungen",
    "content": "Das √úberraschendste: **Nicht-Programmierer sind oft besser**.\n\nWarum? Sie dokumentieren pr√§ziser, weil sie dem Code nicht trauen. Programmierer denken \"Ich versteh das schon\" ‚Äì und tun es zwei Wochen sp√§ter nicht mehr.\n\nIn 6-8 Stunden schaffen Anf√§nger funktionale Prototypen. Der Trick: Klein starten, iterieren, dokumentieren."
  },
  "diskussion": {
    "icon": "ü§î",
    "title": "Was ich anders machen w√ºrde",
    "content": "Ehrlich? Die Methode ist noch jung.\n\n**Offene Fragen:**\n- Funktioniert es bei Teams >3 Personen?\n- Wie skaliert es bei komplexeren Systemen?\n- Brauchen wir mehr formale Validierung?\n\nAber: **Perfekt ist der Feind von gut**. Lieber mit Promptotyping starten als gar nicht dokumentieren.\n\nMein n√§chstes Experiment: KI-gest√ºtzte Validierung der Dokumente selbst."
  },
  "fazit": {
    "icon": "‚ú®",
    "title": "Mein Aufruf an dich",
    "content": "Du musst Promptotyping nicht 1:1 √ºbernehmen.\n\nNimm was passt. Vielleicht nur das JOURNAL. Oder die 6-Phasen-Struktur.\n\n**Das Wichtigste**: Mach dein implizites Wissen explizit. Schreib auf, wie du mit LLMs arbeitest. Teile es.\n\nDie DH-Community braucht genau das: Praktiker, die zeigen *wie* es wirklich geht, nicht nur *dass* es geht.\n\n**Starte heute. Starte klein. Aber starte.**"
  }
}
