{
  "chapter_id": "einleitung",
  "title": "Einleitung",
  "sections": [
    {
      "id": "kernaussage",
      "type": "text",
      "content": "Promptotyping ist eine Methodologie für iteratives Prototyping mit Large Language Models. Der Entwicklungsprozess folgt dem Zyklus beschreiben, generieren, testen, verstehen. Verständnis entsteht durch das Bauen, nicht als Voraussetzung dafür."
    },
    {
      "id": "methode",
      "type": "text",
      "content": "Die Methode strukturiert die Interaktion mit Frontier-LLMs durch Simulation des Managements von Forschungs- oder Softwareprojekten. Verschiedene Modelle werden nach dokumentierten Stärken eingesetzt. Erfolgreiche Prompts und Kontexte werden systematisch zwischen Konversationen übertragen, um iterativ Verständnis aufzubauen."
    },
    {
      "id": "ausgangslage",
      "type": "heading",
      "level": 2,
      "content": "1.1 Ausgangslage"
    },
    {
      "type": "text",
      "content": "Die Integration von Large Language Models in Entwicklungsprozesse verändert Arbeitsweisen fundamental. GitHub Copilot Studien dokumentieren Produktivitätssteigerungen von 55 Prozent. Wissenschaftliche Publikationen zu LLM-assistierter Entwicklung stiegen von sieben im Jahr 2020 auf über 160 in der ersten Hälfte 2023. Diese Adoption erfolgt jedoch ohne systematische Methodiken."
    },
    {
      "id": "vibe-coding",
      "type": "heading",
      "level": 2,
      "content": "1.2 Vibe Coding als intuitiver Ansatz"
    },
    {
      "type": "text",
      "content": "Am 3. Februar 2025 prägte OpenAI-Mitbegründer Andrej Karpathy den Begriff 'Vibe Coding'. Dieser bezeichnet eine KI-gestützte Programmierpraxis, bei der Entwickler durch vage natürlichsprachliche Anweisungen über Tools wie Cursor IDE mit Claude Sonnet 3.5 Code generieren lassen. KI-Vorschläge werden ohne Prüfung akzeptiert. Karpathy beschreibt dies als Zustand, bei dem man 'vergisst, dass der Code überhaupt existiert'."
    },
    {
      "type": "callout",
      "style": "example",
      "title": "Vibe Coding in der Praxis",
      "content": "Vibe Coding ermöglicht schnelles Prototyping. Spiele entstehen inklusive Design-Dokumenten und Testsuites durch Prompts. Die Anwendungen funktionieren ohne Code-Verständnis. Datenanalysen, Visualisierungen und temporäre Projekte nutzen diese Geschwindigkeit."
    },
    {
      "type": "callout",
      "style": "warning",
      "title": "Limitationen",
      "content": "Komplexere Systeme zeigen Limitationen: suboptimale Algorithmen, Sicherheitsrisiken durch falsche Bibliotheken, mangelnde Systemintegration, inkonsistente Architekturen. Verständnislücken entstehen zwischen Anwendung und Implementierung. Karpathy formuliert: 'Frage dich regelmäßig ehrlich, ob du wirklich noch verstehst, was gerade passiert.'"
    },
    {
      "id": "strukturierte-alternative",
      "type": "heading",
      "level": 2,
      "content": "1.3 Strukturierte Alternative"
    },
    {
      "type": "text",
      "content": "Promptotyping bietet eine strukturierte Alternative zum intuitiven Vibe Coding. Die Methode kombiniert KI-assistierte Entwicklung mit systematischer Dokumentation, kontinuierlicher Validierung und expliziter Wissensexternalisierung."
    },
    {
      "type": "comparison",
      "id": "vibe-vs-promptotyping",
      "title": "Vibe Coding vs. Promptotyping",
      "left": {
        "title": "Vibe Coding",
        "items": [
          "Intuitive, vage Prompts",
          "Keine systematische Dokumentation",
          "Akzeptanz ohne Prüfung",
          "Schnelle Ergebnisse",
          "Verständnisverlust möglich"
        ]
      },
      "right": {
        "title": "Promptotyping",
        "items": [
          "Strukturierte, präzise Prompts",
          "Systematische Dokumentation in Phasen",
          "Kontinuierliche Validierung (CEIL)",
          "Iterative Verbesserung",
          "Explizite Wissensexternalisierung"
        ]
      }
    }
  ]
}