{
  "chapter_id": "methodologie",
  "title": "Die Promptotyping-Methodologie",
  "sections": [
    {
      "id": "kernkonzept",
      "type": "heading",
      "level": 2,
      "content": "3.1 Kernkonzept"
    },
    {
      "type": "text",
      "content": "Promptotyping folgt einem Vier-Phasen-Zyklus: Beschreiben, Generieren, Testen, Verstehen. Verständnis entsteht durch Bauen, nicht als Voraussetzung."
    },
    {
      "type": "text",
      "content": "Die Methode externalisiert Projektwissen in strukturierte Markdown-Dokumente. Jede Phase startet mit minimalem Context. Das jeweilige Phasendokument wird dem LLM präsentiert. Die Dokumentation fungiert als strukturiertes Arbeitsgedächtnis und Wissensbasis des Projekts."
    },
    {
      "id": "arbeitsansatz",
      "type": "heading",
      "level": 2,
      "content": "3.2 Arbeitsansatz"
    },
    {
      "type": "text",
      "content": "Der Arbeitsansatz ist inkrementell und fokussiert. Probleme werden sequenziell und vollständig gelöst. Implementiert werden ausschließlich deterministische, vollständig funktionierende Lösungen in Form von validiertem Programmcode oder kuratierten Forschungsdaten."
    },
    {
      "id": "entwicklungsphasen",
      "type": "heading",
      "level": 2,
      "content": "3.3 Entwicklungsphasen"
    },
    {
      "type": "phase-navigator",
      "id": "phase-flow",
      "phases": [
        {
          "id": "context",
          "name": "CONTEXT",
          "description": "Erfasst Projektziele und Constraints",
          "document": "README.md",
          "example_prompt": "Erstelle eine README.md für ein Tool zur Annotation historischer Zeitlinien. Nutzer: Historiker ohne Programmierkenntnisse. Ziel: Ereignisse auf Zeitstrahl markieren und kategorisieren. Constraint: Keine Serverinfrastruktur, läuft im Browser.",
          "token_budget": "500±100",
          "color": "#4A90E2"
        },
        {
          "id": "data",
          "name": "DATA",
          "description": "Spezifiziert Datenstrukturen, Schnittstellen und Beziehungen",
          "document": "DATA.md",
          "token_budget": "800±150",
          "color": "#50C878"
        },
        {
          "id": "exploration",
          "name": "EXPLORATION",
          "description": "Testet Lösungsansätze ohne formale Dokumentation",
          "document": "EXPLORATION.md (optional)",
          "note": "Kann übersprungen werden bei klaren, bekannten Problemstellungen",
          "token_budget": "Variable",
          "color": "#FFB347"
        },
        {
          "id": "requirements",
          "name": "REQUIREMENTS",
          "description": "Formalisiert funktionale und nicht-funktionale Anforderungen",
          "document": "REQUIREMENTS.md",
          "token_budget": "600±100",
          "color": "#9B59B6"
        },
        {
          "id": "implementation",
          "name": "IMPLEMENTATION",
          "description": "Entwickelt Anweisungen und Designspezifikationen",
          "document": "INSTRUCTIONS.md",
          "token_budget": "700±150",
          "color": "#E74C3C"
        },
        {
          "id": "prototype",
          "name": "PROTOTYPE",
          "description": "Generiert Code basierend auf INSTRUCTIONS.md",
          "document": "Code + VALIDATION.md",
          "token_budget": "Variable",
          "color": "#F39C12"
        }
      ]
    },
    {
      "id": "dokumentstruktur",
      "type": "heading",
      "level": 2,
      "content": "3.4 Dokumentstruktur"
    },
    {
      "type": "text",
      "content": "Die Dokumentation operiert auf zwei Ebenen:"
    },
    {
      "type": "two-column",
      "left": {
        "title": "Ergebnisdokumente (Was wurde gebaut)",
        "items": [
          "README.md - Projektziele und Kontext",
          "DATA.md - Datenstrukturen und Schemata",
          "REQUIREMENTS.md - Formale Anforderungen",
          "INSTRUCTIONS.md - Implementierungsanweisungen",
          "VALIDATION.md - Testergebnisse",
          "DEPLOYMENT.md - Produktionsüberführung"
        ]
      },
      "right": {
        "title": "Prozessdokumentation (Wie und warum)",
        "items": [
          "JOURNAL.md - Fortlaufendes Entwicklungsprotokoll",
          "PROMPTS.md - Kuratierte Prompt-Bibliothek (optional, kann aus Journal extrahiert werden)"
        ]
      }
    },
    {
      "id": "journal",
      "type": "heading",
      "level": 2,
      "content": "3.5 Das Promptotyping Journal"
    },
    {
      "type": "callout",
      "style": "important",
      "content": "Das Journal (JOURNAL.md) dokumentiert den kontinuierlichen Entwicklungsprozess als narratives Protokoll. Es erfasst die Evolution von Prompts, Modellentscheidungen und Lernerfahrungen, die in formalen Phasendokumenten verloren gehen würden."
    },
    {
      "type": "code",
      "language": "markdown",
      "title": "Journal-Struktur Beispiel",
      "content": "# Promptotyping Journal: Timeline-Tool\n\n**Ziel:** Historische Timeline-Annotation  \n**Ausgangslage:** Keine vorhandenen Dateien\n\n---\n\n## 2025-02-15 - Phase: CONTEXT\n\n### Kontext\nErstellung der initialen Projektdefinition\n\n### Vorgehen\n**Modell:** Claude 3.5 Sonnet (beste Strukturierung)\n**Input:** Projektidee und Constraints\n\n**Prompt:**\n```\nErstelle eine README.md für ein Tool zur Annotation...\n```\n\n### Ergebnis\nStrukturierte README mit klaren Zielen generiert\n\n### Validierung\n- **Methode:** CEIL-Review durch Domänenexperten\n- **Probleme:** Initiale Überkomplexität (Multi-User vorgeschlagen)\n- **Entscheidung:** Reduktion auf Single-User-Lösung\n\n### Erkenntnisse\n- LLMs neigen zur Überkomplexität\n- CEIL-Intervention essentiell für Scope-Control"
    },
    {
      "id": "savepoints",
      "type": "heading",
      "level": 2,
      "content": "3.6 Savepoints"
    },
    {
      "type": "text",
      "content": "Jede Phase fungiert als Savepoint - ein verifizierbarer Meilenstein. Das Journal dokumentiert explizit jeden Savepoint-Übergang mit Begründung und Validierungsergebnis."
    },
    {
      "type": "checklist",
      "title": "Phasenübergang-Kriterien",
      "items": [
        "CONTEXT → DATA: Projektziele sind klar definiert und vom CEIL validiert",
        "DATA → EXPLORATION: Datenstrukturen sind spezifiziert",
        "EXPLORATION → REQUIREMENTS: Technische Machbarkeit ist geklärt",
        "REQUIREMENTS → IMPLEMENTATION: Anforderungen sind vollständig und widerspruchsfrei",
        "IMPLEMENTATION → PROTOTYPE: Implementierungsstrategie ist dokumentiert"
      ]
    },
    {
      "id": "90-prozent",
      "type": "heading",
      "level": 2,
      "content": "3.7 Das 90-Prozent-Prinzip"
    },
    {
      "type": "callout",
      "style": "insight",
      "content": "Frontier-LLMs erreichen schnell Lösungsgrade von etwa neunzig Prozent, während die finale Optimierung unverhältnismäßig hohen Aufwand erfordert. Diese dokumentierte Limitation bestimmt die Grenze zwischen Automatisierung und manueller Intervention."
    },
    {
      "type": "progress-bar",
      "id": "90-percent-visual",
      "segments": [
        {"label": "LLM-generiert", "percentage": 90, "color": "#50C878"},
        {"label": "Manuelle Nacharbeit", "percentage": 10, "color": "#E74C3C"}
      ]
    },
    {
      "id": "prompt-engineering",
      "type": "heading",
      "level": 2,
      "content": "3.8 Prompt-Engineering in Promptotyping"
    },
    {
      "type": "comparison",
      "title": "Prompt-Vergleich",
      "left": {
        "title": "Vibe Coding Prompt",
        "content": "\"Mach mir eine Timeline-App die irgendwie historische Daten anzeigt\""
      },
      "right": {
        "title": "Promptotyping Prompt",
        "content": "\"Basierend auf README.md und DATA.md: Implementiere die Zeitstrahl-Komponente mit folgenden Spezifikationen:\\n1) Horizontale Timeline 1600-1800\\n2) Kategorien aus DATA.events.categories\\n3) Hover zeigt event.description\\nNutze nur Vanilla JavaScript, keine externen Bibliotheken.\""
      }
    }
  ]
}