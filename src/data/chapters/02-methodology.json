{
  "chapter_id": "methodology",
  "title": "The Six-Phase Framework",
  "sections": [
    {
      "type": "text",
      "content": "The six-phase structure emerged from observing successful LLM collaborations. It's not a rigid prescription but a flexible framework. Most projects use only the phases that add value."
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Core Principle: Optional Phases"
    },
    {
      "type": "text",
      "content": "Every phase is optional. A simple script might only need a clear prompt (PROTOTYPE). A complex system might benefit from all six. The methodology adapts to your needs, not the other way around."
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Phase 1: CONTEXT (README.md)"
    },
    {
      "type": "text",
      "content": "Establish what you're building and why. This isn't about writing perfect documentation—it's about clarifying your own thinking. A good context answers three questions: What problem are we solving? What constraints exist? What does success look like?"
    },
    {
      "type": "callout",
      "style": "insight",
      "content": "In the Stefan Zweig case, establishing 'single-page application' as context prevented framework escalation. One strategic word shaped the entire solution."
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Phase 2: DATA (DATA.md)"
    },
    {
      "type": "text",
      "content": "Define information structures and relationships. Not every project needs this—skip it if your data is simple or predefined. But for complex domains, mapping data helps LLMs understand your mental model."
    },
    {
      "type": "text",
      "content": "Key questions: What entities exist? How do they relate? What must be preserved versus what can be derived? This phase prevents what we call 'data vortex'—the loss of meaning through transformation."
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Phase 3: EXPLORATION"
    },
    {
      "type": "text",
      "content": "Test assumptions and explore approaches. This is where 'vibing' belongs—intuitive, exploratory interaction with the LLM. Try different angles. Ask 'what if?' Generate throwaway prototypes. Learn what works."
    },
    {
      "type": "text",
      "content": "Critical point: Document what you learn, not just what you build. Failed experiments teach as much as successful ones."
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Phase 4: REQUIREMENTS (REQUIREMENTS.md)"
    },
    {
      "type": "text",
      "content": "Crystallize what the system must do. This isn't a contract—it's a conversation with yourself about priorities. What's essential versus nice-to-have? What are the acceptance criteria?"
    },
    {
      "type": "text",
      "content": "Requirements written for LLM consumption differ from traditional specs. Be specific about behavior, not implementation. Focus on outcomes, not methods."
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Phase 5: IMPLEMENTATION (INSTRUCTIONS.md)"
    },
    {
      "type": "text",
      "content": "Plan the technical approach. Architecture decisions, technology choices, algorithms. This phase is often skipped when moving directly from requirements to code is clearer. Use it when you need to think through complex technical decisions."
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Phase 6: PROTOTYPE"
    },
    {
      "type": "text",
      "content": "Generate actual code. This is usually the only mandatory phase—you need code eventually. But arriving here with clear context, data understanding, and requirements makes the difference between coherent solutions and 'promptware.'"
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Phase Flow and Iteration"
    },
    {
      "type": "text",
      "content": "Phases aren't strictly linear. Discoveries in EXPLORATION might refine CONTEXT. PROTOTYPE failures might clarify REQUIREMENTS. The framework provides structure while allowing natural iteration."
    },
    {
      "type": "callout",
      "style": "warning",
      "content": "Warning: Don't force all phases if they don't add value. Process for process's sake is methodology theater. Use what helps, skip what doesn't."
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Documentation as Artifact"
    },
    {
      "type": "text",
      "content": "Each phase produces documentation—not as bureaucratic burden but as thinking artifacts. These documents aren't for some imaginary future maintainer. They're for you, tomorrow, when you've forgotten why you made certain decisions."
    },
    {
      "type": "text",
      "content": "The documents also serve as prompts. A well-written CONTEXT becomes the prompt for DATA. Clear REQUIREMENTS generate better IMPLEMENTATION. The methodology creates a chain of clarity."
    },
    {
      "type": "heading",
      "level": 2,
      "content": "Expert Review Throughout"
    },
    {
      "type": "text",
      "content": "Expert involvement isn't a phase—it's continuous. Experts (which might be you wearing your domain expert hat) prevent AI hallucinations, catch over-engineering, and maintain focus on actual needs versus imagined requirements."
    },
    {
      "type": "text",
      "content": "The expert's role: Question assumptions. Reject unnecessary complexity. Insist on clarity. Prevent solutionism. In every case study, expert intervention was the difference between bloated systems and elegant solutions."
    }
  ]
}